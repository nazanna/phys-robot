import logging
import sqlite3
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode  
from telegram.ext import (
    ApplicationBuilder,
    Application,
    CallbackContext,
    CallbackQueryHandler,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    filters,
)

from constants import RESPONSES_DB_NAME, TOKEN_KEY, WORKDIR
from lockbox import get_lockbox_secret
from main_questions_poll import send_question, question_answer_button_callback
from questions import fetch_questions_from_sheets
from admins import *
from update_pictures import update_pictures_conv_handler, update_pictures
from personal_questions_poll import send_personal_question, PERSONAL_QUESTIONS_STATES
from error_handler import error_handler
from db_api import get_users_grade, NoGradeException
from feedback import first_question, FEEDBACK_QUESTIONS_STATES, send_feedback_messages

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.WARN,
    filename=os.path.join(WORKDIR, 'bot.log'),
    filemode='w'
)

logger = logging.getLogger(__name__)

async def start(update: Update, context: CallbackContext):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –°–µ–π—á–∞—Å –Ω–∞—á–Ω–µ—Ç—Å—è –±–æ–ª—å—à–æ–π –æ–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—á–∞–π—Ç–µ —á–µ—Å—Ç–Ω–æ –∏ –¥—É–º–∞–π—Ç–µ –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º!")
    if await user_has_admin_rights(update):
        await update.message.reply_text('''–ü–æ –∫–æ–º–∞–Ω–¥–µ /update\_pictures –º–æ–∂–Ω–æ –∑–∞–Ω–æ–≤–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å –¥–∏—Å–∫–∞.

–ü–æ –∫–æ–º–∞–Ω–¥–µ /update\_questions –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ (–æ–±–Ω–æ–≤–ª—è—Ç—å –Ω–∞–¥–æ –≤ [excel —Ñ–∞–π–ª–µ]\
(https://docs.google.com/spreadsheets/d/10H3dZbEEVLgHWH3xB9t8HPxAT7tW3QP8VXGvFFSOuD8/))''', parse_mode=ParseMode.MARKDOWN)
    context.user_data['initial_question'] = 0
    state = await send_personal_question(update, context)
    return state

async def poll(update: Update, context: CallbackContext):
    if not update.callback_query:
        message = update.message
    else:
        message = update.callback_query.message
    try:
        await get_users_grade(update.effective_user.id, context)
        await send_question(message, update.effective_user.id, context)
    except NoGradeException:
        await update.effective_chat.send_message("–ö–∞–∂–µ—Ç—Å—è, –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–µ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ —Å–µ–±—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start –∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–∏—Ö")

async def restart(update: Update, _: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data="restart_confirm"),
         InlineKeyboardButton("–ù–µ—Ç", callback_data="restart_cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?", reply_markup=reply_markup)

async def handle_restart_button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    if query.data == "restart_confirm":
        user_id = update.effective_user.id        
        conn = sqlite3.connect(RESPONSES_DB_NAME)
        cursor = conn.cursor()
        cursor.execute('DELETE FROM responses WHERE user_id = ?', (user_id,))
        conn.commit()
        conn.close()
        
        context.user_data['question_index'] = 0
        
        await query.message.edit_text("–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —É–¥–∞–ª–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /poll, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    else:
        await query.message.edit_text("–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏.")

async def handle_sticker_response(update: Update, _: CallbackContext):
    await update.message.reply_text("–°—Ç–∏–∫–µ—Ä—ã —ç—Ç–æ, –∫–æ–Ω–µ—á–Ω–æ, —Ö–æ—Ä–æ—à–æ, –Ω–æ –º–± –≤—Å–µ –∂–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å–∏–∫–∏ –ø–æ–æ—Ç–≤–µ—á–∞–µ–º?üëâüëà")

async def handle_start_poll_button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    if query.data == "start_poll":
        await poll(update, context)

async def update_questions(update: Update, context: CallbackContext):
    if not await ensure_admin_rights(update):
        return
    await update.message.reply_text("–ù–∞—á–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
    await fetch_questions_from_sheets()
    await update.effective_chat.send_message("–í–æ–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")

async def post_init(app: Application):
    await fetch_questions_from_sheets()
    await send_feedback_messages(app.bot)
    
def main():
    token = get_lockbox_secret(TOKEN_KEY)
    app = ApplicationBuilder().token(token).build()
    app = ApplicationBuilder().token(token).post_init(post_init).build()
    print("Bot successfully started!")
    logger.info("Bot successfully started!")

    app.add_handler(CommandHandler("poll", poll, block=False))
    app.add_handler(CommandHandler("restart", restart, block=False))
    app.add_handler(MessageHandler(filters.Sticker.ALL, handle_sticker_response, block=False))
    
    app.add_handler(CommandHandler("update_questions", update_questions))
    app.add_handler(CommandHandler("update_pictures", update_pictures))
    app.add_handler(CallbackQueryHandler(question_answer_button_callback, pattern="response_", block=False))
    app.add_handler(CallbackQueryHandler(handle_start_poll_button, pattern="start_poll", block=False))
    app.add_handler(CallbackQueryHandler(handle_restart_button, pattern="restart_", block=False))
    app.add_handler(update_pictures_conv_handler)
    for handlers in PERSONAL_QUESTIONS_STATES.values():
        handlers.append(CommandHandler("start", start))
    initial_questions_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states=PERSONAL_QUESTIONS_STATES, 
        fallbacks=[]
    )
    app.add_handler(initial_questions_conv_handler)
    feedback_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(first_question, pattern="feedback_ok", block=False)],
        states=FEEDBACK_QUESTIONS_STATES, 
        fallbacks=[]
    )
    app.add_handler(feedback_handler)

    app.add_error_handler(error_handler)
    app.run_polling()


if __name__ == '__main__':
    main()